{"version":3,"sources":["components/NavbarHeader.js","components/Dropzone/VideoDropZone.js","components/ClassifierComponent.js","components/Dropzone/TestCaseButton.js","components/ImageList/ResultCard.js","components/ImageList/HorizontalImageList.js","components/ImageList/CustomAccordion.js","components/ImageList/ImageList.js","components/Dropzone/FileList.js","components/RequestImagesButton.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["require","Navbar","Nav","NavbarHeader","bg","Brand","href","className","alt","style","color","to","VideoDropZone","setFiles","onDrop","useCallback","acceptedFiles","console","log","useDropzone","accept","minSize","maxSize","getRootProps","getInputProps","isDragActive","fontSize","ClassifierComponent","files","TestCaseButton","useEffect","Card","height","Body","src","process","Button","variant","onClick","fetch","headers","then","response","blob","File","ResultCard","img","Image","imagefile","maxHeight","HorizontalImageList","items","images","map","ListGroup","Item","id","horizontal","CustomAccordion","name","Accordion","Toggle","as","eventKey","AccordionCollapse","ImageList","groupBy","objectArray","property","reduce","acc","obj","key","push","grouped","il","Object","keys","imageList","FileList","file","RequestImagesButton","setImages","useState","isLoading","setLoading","apiUrl","getImages","axios","get","data","length","size","formData","FormData","append","post","header","resp","imgresp","catch","err","classifyVid","Spinner","animation","role","About","App","exact","path","component","ClassifierPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.eb3c6bfd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nconst { Navbar, Nav } = require(\"react-bootstrap\");\r\n\r\nconst NavbarHeader = () => {\r\n    return (\r\n        <Navbar bg=\"secondary\">\r\n            <Navbar.Brand href=\"/II-frontend\">\r\n                <i\r\n                    className=\"d-inline-block align-top fas fa-battery-full fa-lg\"\r\n                    alt=\"React Bootstrap logo\"\r\n                />\r\n            </Navbar.Brand>\r\n            <Nav >\r\n                <Link style={{ color: \"lightgray\" }} to=\"/II-frontend/about\">About</Link>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NavbarHeader;","import React, { useCallback } from 'react'\r\nimport './VideoDropZone.css'\r\nimport { useDropzone } from 'react-dropzone'\r\n\r\nfunction VideoDropZone({ setFiles }) {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        console.log(acceptedFiles)\r\n        setFiles(acceptedFiles)\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop: onDrop, accept: \"video/*\", minSize: 0, maxSize: 5242880 * 3 })\r\n\r\n    return (\r\n        <section className='container'>\r\n            <div {...getRootProps({ className: 'videodropzone back' })}>\r\n                <input {...getInputProps()} />\r\n                <i className=\"fas fa-file-video\" style={{ fontSize: 100 }}></i>\r\n                {\r\n                    isDragActive ?\r\n                        <p>Drop the files here ...</p> :\r\n                        <p>\r\n                            Upload a video file here\r\n                            <br /> Max 15 Mb\r\n                        </p>\r\n                }\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default VideoDropZone;","import React from 'react';\r\nimport VideoDropZone from './Dropzone/VideoDropZone';\r\n\r\nconst ClassifierComponent = ({ files, setFiles }) => {\r\n    return (\r\n        <div className=\"col-4\">\r\n            <VideoDropZone setFiles={setFiles} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClassifierComponent;","import React, { useEffect } from 'react';\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport { Player } from 'video-react';\r\nimport \"video-react/dist/video-react.css\";\r\n\r\nfunction TestCaseButton({ files, setFiles }) {\r\n    const fetchLocalFile = () => {\r\n        const fetchUrl = process.env.NODE_ENV === \"production\" ? `https://alwaysblind.github.io/II-frontend/mug-test.mp4` : `${process.env.PUBLIC_URL}/mug-test.mp4`\r\n        return fetch(fetchUrl, {\r\n            headers: {\r\n                'Content-Type': 'video/mp4'\r\n            }\r\n        })\r\n            .then(response => response.blob())\r\n            .then(blob => {\r\n                console.log(blob)\r\n                setFiles([new File([blob], \"ClassicFile\")])\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(files)\r\n        return () => {\r\n        }\r\n    }, [files]);\r\n    return (\r\n        <Card className='col-2 mt-3' style={{ height: '100%' }}>\r\n            <Card.Body >\r\n                <Player src={process.env.PUBLIC_URL + \"/mug-test.mp4\"}></Player>\r\n                <Button className='mt-2' variant=\"dark\" onClick={fetchLocalFile}>Or test this video</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n\r\n}\r\n\r\nexport default TestCaseButton;","import React from 'react';\r\nimport { Card, Image } from \"react-bootstrap\";\r\n\r\nfunction ResultCard({ img }) {\r\n    return (\r\n        <Card>\r\n            <Image className=\"card\" src={img.imagefile} style={{ maxHeight: '10rem' }} />\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ResultCard;","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport ResultCard from './ResultCard';\r\nimport './HorizontalImageList.css'\r\n\r\nconst HorizontalImageList = ({ images }) => {\r\n    const items = images.map(img =>\r\n        <ListGroup.Item key={img.id}>\r\n            <ResultCard className=\"card\" img={img} />\r\n        </ListGroup.Item >)\r\n\r\n    return (\r\n        <ListGroup horizontal className='justify-content-md-center listgroup'>\r\n            {items}\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default HorizontalImageList;","import React from 'react';\r\nimport { Accordion, AccordionCollapse, Button, Card } from 'react-bootstrap';\r\nimport HorizontalImageList from './HorizontalImageList';\r\n\r\nconst CustomAccordion = ({ images, name }) => {\r\n    return (\r\n        <Accordion className='Accordion' >\r\n            <Card>\r\n                <Card.Body>\r\n                    <Accordion.Toggle as={Button} variant=\"outline-secondary\" eventKey=\"0\">\r\n                        {name}\r\n                    </Accordion.Toggle>\r\n                </Card.Body>\r\n            </Card>\r\n            <AccordionCollapse eventKey='0'>\r\n                <HorizontalImageList images={images} />\r\n            </AccordionCollapse>\r\n        </Accordion >\r\n    );\r\n}\r\n\r\nexport default CustomAccordion;","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport CustomAccordion from './CustomAccordion';\r\n\r\nfunction ImageList({ images }) {\r\n    const imageList = (images) => {\r\n        const grouped = groupBy(images, 'classification_label')\r\n        const keys = Object.keys(grouped)\r\n        const il = keys.map(key => <CustomAccordion images={grouped[key]} name={key} key={key} />);\r\n        return <ListGroup> {il} </ListGroup>\r\n    }\r\n\r\n    const groupBy = (objectArray, property) => {\r\n        return objectArray.reduce((acc, obj) => {\r\n            const key = obj[property];\r\n            if (!acc[key]) {\r\n                acc[key] = [];\r\n            }\r\n            acc[key].push(obj);\r\n            return acc;\r\n        }, {});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {imageList(images)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageList;","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nconst FileList = ({ files }) => {\r\n    return (\r\n        <ListGroup>\r\n            {files.map(file =>\r\n                <ListGroup.Item key={file.name} > file: {file.name}</ListGroup.Item>)\r\n            }\r\n        </ListGroup >\r\n    );\r\n}\r\n\r\nexport default FileList;    ","import React, { useState } from 'react';\r\nimport { Button, Spinner } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nconst RequestImagesButton = ({ files, setImages }) => {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const apiUrl = 'https://neverblind.pythonanywhere.com/'\r\n\r\n    const classifyVid = (files) => {\r\n        let formData = new FormData()\r\n        setLoading(true)\r\n        formData.append('videofile', files[0], files[0].name)\r\n        formData.append('title', files[0].name)\r\n        axios.post(`${apiUrl}indexedvideos/`,\r\n            formData,\r\n            {\r\n                header: {\r\n                    'accept': 'application/json',\r\n                    'content-type': 'multipart/form-data'\r\n                }\r\n            })\r\n            .then(resp => {\r\n                getImages(resp)\r\n                    .then(\r\n                        imgresp => {\r\n                            console.log(imgresp.data);\r\n                            setImages(imgresp.data)\r\n                        }\r\n                    )\r\n            })\r\n            .catch(err => console.log(err))\r\n            .then(() => { setLoading(false) })\r\n    }\r\n\r\n    const getImages = (obj) => {\r\n\r\n        return axios.get(`${apiUrl}indexedvideos/${obj.data.id}/images`, {\r\n            headers: {\r\n                'accept': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                files.length > 0 && !isLoading &&\r\n                <Button variant='secondary' size='lg' className='mt-3' onClick={() => classifyVid(files)}> Index Video </Button>\r\n            }\r\n            {\r\n                isLoading &&\r\n                <Spinner animation='border' role='status' className='mt-10'>\r\n                    <span className='sr-only'> Loading... </span>\r\n                </Spinner>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RequestImagesButton;\r\n","import React from 'react';\r\nfunction About() {\r\n    return (<div>\r\n        <h1>This is AlwaysBlind on github </h1>\r\n        <h1> Contact me at alwaysblindbusiness@gmail.com</h1>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default About;","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport NavbarHeader from './components/NavbarHeader';\r\nimport ClassifierComponent from './components/ClassifierComponent';\r\nimport TestCaseButton from './components/Dropzone/TestCaseButton';\r\nimport ImageList from './components/ImageList/ImageList';\r\nimport FileList from './components/Dropzone/FileList';\r\nimport RequestImagesButton from './components/RequestImagesButton'\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport About from './components/About';\r\n\r\nfunction App() {\r\n  const [files, setFiles] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n  return (\r\n    <div className='App'>\r\n      <Router>\r\n        <NavbarHeader />\r\n        <Switch>\r\n          <Route exact path='/' component={ClassifierPage} />\r\n          <Route path='/II-frontend/about' component={About} />\r\n          <Route exact path='*' component={ClassifierPage} />\r\n        </Switch>\r\n      </Router>\r\n    </div >\r\n  );\r\n\r\n  function ClassifierPage() {\r\n    return (\r\n      <div>\r\n        <div className='d-flex flex-row justify-content-center mt-5 pt-5'>\r\n          <ClassifierComponent setFiles={setFiles} files={files} />\r\n          <TestCaseButton className='pt-5' setFiles={setFiles} files={files} />\r\n        </div>\r\n        <div>\r\n          <FileList files={files} />\r\n          <RequestImagesButton files={files} setImages={setImages} />\r\n          <ImageList images={images} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}