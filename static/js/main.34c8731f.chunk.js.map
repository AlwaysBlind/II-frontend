{"version":3,"sources":["components/Dropzone/VideoDropZone.js","components/ImageList/ResultCard.js","components/ImageList/HorizontalImageList.js","components/ImageList/ImageList.js","components/Classifier.js","components/NavbarHeader.js","App.js","serviceWorker.js","index.js"],"names":["VideoDropZone","setFiles","onDrop","useCallback","acceptedFiles","console","log","useDropzone","accept","getRootProps","getInputProps","isDragActive","className","style","fontSize","ResultCard","img","Card","Image","src","imagefile","HorizontalImageList","items","images","map","ListGroup","Item","key","id","horizontal","ImageList","groupBy","objectArray","property","reduce","acc","obj","push","grouped","il","Object","keys","Accordion","Body","Toggle","as","Button","variant","eventKey","AccordionCollapse","imageList","Classifier","useState","files","setImages","isLoading","setLoading","getImages","axios","get","data","headers","file","uniqid","name","ShowFiles","length","size","onClick","formData","FormData","append","post","header","then","resp","imgresp","catch","err","classify_vid","Spinner","animation","role","Navbar","require","NavbarHeader","bg","Brand","href","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.34c8731f.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\r\nimport './VideoDropZone.css'\r\nimport { useDropzone } from 'react-dropzone'\r\n\r\nfunction VideoDropZone({ setFiles }) {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        console.log(acceptedFiles)\r\n        setFiles(acceptedFiles)\r\n        // Do something with the files\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop: onDrop, accept: \"video/*\" })\r\n\r\n    return (\r\n        <section className='container'>\r\n            <div {...getRootProps({ className: 'videodropzone back' })}>\r\n                <input {...getInputProps()} />\r\n                <i className=\"fas fa-file-video\" style={{ fontSize: 100 }}></i>\r\n                {\r\n                    isDragActive ?\r\n                        <p>Drop the files here ...</p> :\r\n                        <p>Drag 'n' drop some files here, or click to select files</p>\r\n                }\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default VideoDropZone;","import React from 'react';\r\nimport { Card, Image } from \"react-bootstrap\";\r\n\r\nfunction ResultCard({ img }) {\r\n    return (\r\n        <Card>\r\n            <Image className=\"card\" src={img.imagefile} />\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ResultCard;","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport ResultCard from './ResultCard';\r\nimport './HorizontalImageList.css'\r\n\r\nconst HorizontalImageList = ({ images }) => {\r\n    const items = images.map(img =>\r\n        <ListGroup.Item key={img.id}>\r\n            <ResultCard className=\"card\" img={img} />\r\n        </ListGroup.Item >)\r\n\r\n    return (\r\n        <ListGroup horizontal className='justify-content-md-center listgroup'>\r\n            {items}\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default HorizontalImageList;","import React from 'react';\r\nimport { Button, ListGroup, Card, Accordion, AccordionCollapse } from 'react-bootstrap';\r\nimport HorizontalImageList from './HorizontalImageList'\r\n\r\nfunction ImageList({ images }) {\r\n    const imageList = (images) => {\r\n        const grouped = groupBy(images, 'classification_label')\r\n        const keys = Object.keys(grouped)\r\n        const il = keys.map(key => {\r\n            return (\r\n                <Accordion key={key} className='Accordion' >\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Accordion.Toggle as={Button} variant=\"outline-secondary\" eventKey=\"0\">\r\n                                {key}\r\n                            </Accordion.Toggle>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <AccordionCollapse eventKey='0'>\r\n                        <HorizontalImageList images={grouped[key]} key={key} />\r\n                    </AccordionCollapse>\r\n                </Accordion >\r\n            )\r\n        });\r\n        return <ListGroup> {il} </ListGroup>\r\n    }\r\n\r\n    const groupBy = (objectArray, property) => {\r\n        return objectArray.reduce((acc, obj) => {\r\n            const key = obj[property];\r\n            if (!acc[key]) {\r\n                acc[key] = [];\r\n            }\r\n            acc[key].push(obj);\r\n            return acc;\r\n        }, {});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {imageList(images)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageList;","import React, { useState } from 'react';\r\nimport VideoDropZone from './Dropzone/VideoDropZone';\r\nimport axios from 'axios';\r\nimport { Button, ListGroup, Spinner } from 'react-bootstrap';\r\nimport ImageList from './ImageList/ImageList';\r\nimport uniqid from 'uniqid';\r\n\r\nconst Classifier = () => {\r\n    const [files, setFiles] = useState([]);\r\n    const [images, setImages] = useState([]);\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const classify_vid = (files) => {\r\n        let formData = new FormData()\r\n        setLoading(true)\r\n        formData.append('videofile', files[0], files[0].name)\r\n        formData.append('title', files[0].name)\r\n        axios.post(\"http://127.0.0.1:8000/indexedvideos/\",\r\n            formData,\r\n            {\r\n                header: {\r\n                    'accept': 'application/json',\r\n                    'content-type': 'multipart/form-data'\r\n                }\r\n            })\r\n            .then(resp => {\r\n                getImages(resp)\r\n                    .then(\r\n                        imgresp => {\r\n                            console.log(imgresp.data);\r\n                            setImages(imgresp.data)\r\n                        }\r\n                    )\r\n            })\r\n            .catch(err => console.log(err))\r\n            .then(() => { setLoading(false) })\r\n    }\r\n\r\n    const getImages = (obj) => {\r\n\r\n        return axios.get(`http://127.0.0.1:8000/indexedvideos/${obj.data.id}/images`, {\r\n            headers: {\r\n                'accept': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    // Use stable, predictable, unique key instead of uniqid\r\n    const ShowFiles = (files) => {\r\n        return (\r\n            <ListGroup>\r\n                {files.map(file => <ListGroup.Item key={uniqid()} > file: {file.name}</ListGroup.Item>)\r\n                }\r\n            </ListGroup >\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <VideoDropZone setFiles={setFiles} />\r\n            <div className='mb-3'>\r\n                {ShowFiles(files)}\r\n            </div>\r\n            {files.length > 0 && !isLoading &&\r\n                <Button variant='secondary' size='lg' className='mt-3' onClick={() => classify_vid(files)}> Index Video </Button>\r\n            }\r\n            { isLoading &&\r\n                <Spinner animation='border' role='status' className='mt-10'>\r\n                    <span className='sr-only'> Loading... </span>\r\n                </Spinner>\r\n            }\r\n            <ImageList images={images} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Classifier;","import React from 'react';\r\nconst { Navbar } = require(\"react-bootstrap\");\r\n\r\nconst NavbarHeader = () => {\r\n    return (\r\n        <Navbar bg=\"secondary\">\r\n            <Navbar.Brand href=\"/\">\r\n                <i\r\n                    className=\"d-inline-block align-top fas fa-battery-full fa-lg\"\r\n                    alt=\"React Bootstrap logo\"\r\n                />\r\n            </Navbar.Brand>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NavbarHeader;","import './App.css';\nimport Classifier from './components/Classifier';\nimport React from 'react';\nimport NavbarHeader from './components/NavbarHeader';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <NavbarHeader />\n      <Classifier />\n    </div>\n  );\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}